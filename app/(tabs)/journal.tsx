import React, { useEffect, useRef, useState } from 'react';
import { 
  StyleSheet, 
  View, 
  Text, 
  FlatList, 
  ActivityIndicator, 
  TouchableOpacity,
  Alert,
  TextInput,
  Modal,
  ScrollView,
  Pressable
} from 'react-native';
import { StatusBar } from 'expo-status-bar';
import { Ionicons } from '@expo/vector-icons';
import MapView, { Marker, PROVIDER_DEFAULT } from 'react-native-maps';
import * as Location from 'expo-location';
import { format, isToday, isYesterday } from 'date-fns';

import { Colors } from '@/constants/Colors';
import { 
  JournalEntry, 
  getJournalEntries, 
  trackLocationForJournal,
  addManualJournalEntry,
  generateMockJournalEntries,
  clearJournalEntries
} from '@/utils/journalService';
import JourneyMap from '@/components/JourneyMap';

// Tab options for switching between list and map view
type JournalTab = 'timeline' | 'map';

const EmptyJournalState = ({ onRefresh }: { onRefresh: () => void }) => (
  <View style={styles.emptyContainer}>
    <Ionicons name="book" size={64} color={Colors.dark.textSecondary} />
    <Text style={styles.emptyTitle}>No Journal Entries Yet</Text>
    <Text style={styles.emptySubtitle}>
      Your journey will be automatically tracked as you travel around New Zealand
    </Text>
    <TouchableOpacity style={styles.emptyButton} onPress={onRefresh}>
      <Text style={styles.emptyButtonText}>Refresh</Text>
    </TouchableOpacity>
  </View>
);

const JournalEntryCard = ({ entry, isFirst, isLast }: { entry: JournalEntry, isFirst: boolean, isLast: boolean }) => {
  // Format the date for display
  const formatEntryDate = (timestamp: number) => {
    const date = new Date(timestamp);
    if (isToday(date)) {
      return `Today, ${format(date, 'h:mm a')}`;
    } else if (isYesterday(date)) {
      return `Yesterday, ${format(date, 'h:mm a')}`;
    } else {
      return format(date, 'MMM d, yyyy - h:mm a');
    }
  };

  return (
    <View style={styles.timelineContainer}>
      {/* Timeline connector */}
      <View style={styles.timelineConnectorContainer}>
        <View style={[
          styles.timelineConnector, 
          isFirst && styles.timelineConnectorFirst, 
          isLast && styles.timelineConnectorLast
        ]} />
        <View style={[
          styles.timelineDot,
          entry.isAutoGenerated ? styles.timelineDotAuto : styles.timelineDotManual
        ]}>
          <Ionicons 
            name={entry.isAutoGenerated ? "navigate" : "pin"} 
            size={14} 
            color="white" 
          />
        </View>
      </View>

      {/* Entry content */}
      <View style={styles.entryCard}>
        <View style={styles.entryHeader}>
          <View style={styles.entryLocation}>
            <Text style={styles.entryLocationText}>{entry.location.placeName}</Text>
          </View>
          <Text style={styles.entryTime}>{formatEntryDate(entry.timestamp)}</Text>
        </View>
        
        {entry.distanceTraveled && (
          <View style={styles.travelStatsContainer}>
            <Ionicons name="speedometer" size={16} color={Colors.dark.accentOrange} />
            <Text style={styles.travelStatsText}>
              {entry.distanceTraveled.toFixed(1)} km traveled since last entry
            </Text>
          </View>
        )}
        
        {entry.notes && (
          <View style={styles.notesContainer}>
            <Text style={styles.notesText}>{entry.notes}</Text>
          </View>
        )}

        <View style={styles.entryFooter}>
          <View style={styles.entryTypeContainer}>
            <View style={[
              styles.entryTypeDot,
              { backgroundColor: entry.isAutoGenerated ? Colors.dark.accentBlue : Colors.dark.accentGreen }
            ]} />
            <Text style={styles.entryTypeText}>
              {entry.isAutoGenerated ? 'Auto tracked' : 'Manual entry'}
            </Text>
          </View>
          
          <TouchableOpacity style={styles.entryLocationButton}>
            <Ionicons name="location" size={14} color={Colors.dark.tint} />
            <Text style={styles.entryLocationButtonText}>
              {entry.location.latitude.toFixed(4)}, {entry.location.longitude.toFixed(4)}
            </Text>
          </TouchableOpacity>
        </View>
      </View>
    </View>
  );
};

export default function JournalScreen() {
  const [entries, setEntries] = useState<JournalEntry[]>([]);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);
  const [newNote, setNewNote] = useState('');
  const [activeTab, setActiveTab] = useState<JournalTab>('timeline');
  const locationCheckInterval = useRef<NodeJS.Timeout | null>(null);

  // Load journal entries
  const loadEntries = async () => {
    try {
      const journalEntries = await getJournalEntries();
      setEntries(journalEntries);
    } catch (error) {
      console.error('Error loading journal entries:', error);
      Alert.alert('Error', 'Could not load journal entries');
    } finally {
      setLoading(false);
      setRefreshing(false);
    }
  };

  // Try to create a new entry based on current location
  const checkLocationAndCreateEntry = async () => {
    try {
      const newEntry = await trackLocationForJournal();
      if (newEntry) {
        // Only reload entries if a new one was created
        await loadEntries();
      }
    } catch (error) {
      console.error('Error checking location:', error);
    }
  };

  // Load mock data for demo purposes
  const loadMockData = async () => {
    try {
      setLoading(true);
      await generateMockJournalEntries();
      await loadEntries();
      Alert.alert('Success', 'Mock journey data loaded successfully');
    } catch (error) {
      console.error('Error loading mock data:', error);
      Alert.alert('Error', 'Could not load mock journey data');
    } finally {
      setLoading(false);
    }
  };

  // Set up location tracking
  useEffect(() => {
    loadEntries();
    
    // Check location immediately on load
    checkLocationAndCreateEntry();
    
    // Then set up periodic checks
    locationCheckInterval.current = setInterval(checkLocationAndCreateEntry, 900000); // Every 15 minutes
    
    return () => {
      if (locationCheckInterval.current) {
        clearInterval(locationCheckInterval.current);
      }
    };
  }, []);

  // Handle refresh
  const handleRefresh = () => {
    setRefreshing(true);
    checkLocationAndCreateEntry()
      .then(() => loadEntries())
      .catch(error => {
        console.error('Error refreshing:', error);
        setRefreshing(false);
      });
  };

  // Handle adding a manual entry
  const handleAddManualEntry = async () => {
    if (!newNote.trim()) {
      Alert.alert('Error', 'Please enter some notes for your journal entry');
      return;
    }
    
    try {
      await addManualJournalEntry(newNote.trim());
      setNewNote('');
      setModalVisible(false);
      await loadEntries();
      Alert.alert('Success', 'Journal entry added');
    } catch (error) {
      console.error('Error adding manual entry:', error);
      Alert.alert('Error', 'Could not add journal entry');
    }
  };

  // Handle clearing data
  const handleClearData = async () => {
    try {
      Alert.alert(
        'Clear All Journal Data',
        'Are you sure you want to clear all journal entries? This cannot be undone.',
        [
          { text: 'Cancel', style: 'cancel' },
          { 
            text: 'Clear Data', 
            style: 'destructive',
            onPress: async () => {
              setLoading(true);
              await clearJournalEntries();
              setEntries([]);
              setLoading(false);
              Alert.alert('Success', 'All journal entries have been cleared');
            }
          }
        ]
      );
    } catch (error) {
      console.error('Error clearing data:', error);
      Alert.alert('Error', 'Could not clear journal entries');
      setLoading(false);
    }
  };

  // Render item with data about position in the list
  const renderItem = ({ item, index }: { item: JournalEntry, index: number }) => (
    <JournalEntryCard 
      entry={item} 
      isFirst={index === 0}
      isLast={index === entries.length - 1}
    />
  );

  // Tab switcher component
  const TabSwitcher = () => (
    <View style={styles.tabSwitcher}>
      <Pressable
        style={[styles.tabButton, activeTab === 'timeline' && styles.activeTabButton]}
        onPress={() => setActiveTab('timeline')}
      >
        <Ionicons 
          name="time" 
          size={20} 
          color={activeTab === 'timeline' ? Colors.dark.tint : Colors.dark.textSecondary} 
        />
        <Text 
          style={[
            styles.tabButtonText, 
            activeTab === 'timeline' && styles.activeTabButtonText
          ]}
        >
          Timeline
        </Text>
      </Pressable>
      <Pressable
        style={[styles.tabButton, activeTab === 'map' && styles.activeTabButton]}
        onPress={() => setActiveTab('map')}
      >
        <Ionicons 
          name="map" 
          size={20} 
          color={activeTab === 'map' ? Colors.dark.tint : Colors.dark.textSecondary} 
        />
        <Text 
          style={[
            styles.tabButtonText, 
            activeTab === 'map' && styles.activeTabButtonText
          ]}
        >
          Journey
        </Text>
      </Pressable>
    </View>
  );

  return (
    <View style={styles.container}>
      <StatusBar style="light" />
      
      <View style={styles.header}>
        <Text style={styles.title}>Travel Journal</Text>
        <View style={styles.headerButtons}>
          <TouchableOpacity 
            style={[styles.iconButton, styles.mockDataButton]}
            onPress={loadMockData}
          >
            <Ionicons name="map-outline" size={20} color={Colors.dark.text} />
          </TouchableOpacity>
          {entries.length > 0 && (
            <TouchableOpacity 
              style={[styles.iconButton, styles.clearDataButton]}
              onPress={handleClearData}
            >
              <Ionicons name="trash-outline" size={20} color={Colors.dark.accentRed} />
            </TouchableOpacity>
          )}
          <TouchableOpacity 
            style={styles.iconButton}
            onPress={() => setModalVisible(true)}
          >
            <Ionicons name="add" size={24} color={Colors.dark.text} />
          </TouchableOpacity>
        </View>
      </View>
      
      {!loading && entries.length === 0 ? (
        <View style={styles.emptyStateWithActions}>
          <EmptyJournalState onRefresh={handleRefresh} />
          <TouchableOpacity 
            style={styles.mockDataButtonLarge}
            onPress={loadMockData}
          >
            <Ionicons name="globe-outline" size={24} color="white" />
            <Text style={styles.mockDataButtonText}>
              Load NZ Journey Demo Data
            </Text>
          </TouchableOpacity>
        </View>
      ) : (
        <>
          {/* Tab Switcher */}
          {!loading && entries.length > 0 && <TabSwitcher />}
          
          {loading ? (
            <View style={styles.loadingContainer}>
              <ActivityIndicator size="large" color={Colors.dark.tint} />
              <Text style={styles.loadingText}>Loading your journey...</Text>
            </View>
          ) : (
            <>
              {activeTab === 'timeline' ? (
                <FlatList
                  data={entries}
                  renderItem={renderItem}
                  keyExtractor={(item) => item.id}
                  contentContainerStyle={styles.listContent}
                  onRefresh={handleRefresh}
                  refreshing={refreshing}
                />
              ) : (
                <JourneyMap entries={entries} />
              )}
            </>
          )}
        </>
      )}
      
      {/* Modal for adding manual entries */}
      <Modal
        animationType="slide"
        transparent={true}
        visible={modalVisible}
        onRequestClose={() => setModalVisible(false)}
      >
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Add Journal Entry</Text>
            
            <TextInput
              style={styles.notesInput}
              placeholder="What's happening on your journey?"
              placeholderTextColor={Colors.dark.textSecondary}
              multiline
              numberOfLines={5}
              value={newNote}
              onChangeText={setNewNote}
            />
            
            <View style={styles.modalButtons}>
              <TouchableOpacity 
                style={[styles.modalButton, styles.cancelButton]}
                onPress={() => {
                  setNewNote('');
                  setModalVisible(false);
                }}
              >
                <Text style={styles.cancelButtonText}>Cancel</Text>
              </TouchableOpacity>
              
              <TouchableOpacity 
                style={[styles.modalButton, styles.saveButton]}
                onPress={handleAddManualEntry}
              >
                <Text style={styles.saveButtonText}>Save Entry</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Colors.dark.background,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingTop: 60,
    paddingBottom: 16,
  },
  title: {
    fontSize: 34,
    fontWeight: '800',
    color: Colors.dark.text,
  },
  headerButtons: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  iconButton: {
    width: 44,
    height: 44,
    borderRadius: 22,
    backgroundColor: Colors.dark.card,
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: Colors.dark.cardBorder,
  },
  mockDataButton: {
    marginRight: 8,
    backgroundColor: 'rgba(78, 205, 196, 0.2)',
    borderColor: Colors.dark.tint,
  },
  clearDataButton: {
    marginRight: 8,
    backgroundColor: 'rgba(231, 76, 60, 0.1)',
    borderColor: Colors.dark.accentRed,
  },
  tabSwitcher: {
    flexDirection: 'row',
    backgroundColor: Colors.dark.card,
    margin: 16,
    borderRadius: 12,
    padding: 4,
    borderWidth: 1,
    borderColor: Colors.dark.cardBorder,
  },
  tabButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    borderRadius: 8,
  },
  activeTabButton: {
    backgroundColor: 'rgba(0, 122, 255, 0.1)',
  },
  tabButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: Colors.dark.textSecondary,
    marginLeft: 8,
  },
  activeTabButtonText: {
    color: Colors.dark.tint,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    marginTop: 12,
    fontSize: 16,
    color: Colors.dark.text,
  },
  listContent: {
    padding: 16,
    paddingBottom: 100, // extra padding for bottom tab bar
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 32,
  },
  emptyTitle: {
    fontSize: 20,
    fontWeight: '700',
    color: Colors.dark.text,
    marginTop: 16,
    marginBottom: 8,
  },
  emptySubtitle: {
    fontSize: 16,
    color: Colors.dark.textSecondary,
    textAlign: 'center',
    marginBottom: 24,
  },
  emptyButton: {
    backgroundColor: Colors.dark.tint,
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
  },
  emptyButtonText: {
    color: 'white',
    fontWeight: '600',
    fontSize: 16,
  },
  timelineContainer: {
    flexDirection: 'row',
    marginBottom: 16,
  },
  timelineConnectorContainer: {
    width: 40,
    alignItems: 'center',
    marginRight: 12,
  },
  timelineConnector: {
    width: 2,
    backgroundColor: Colors.dark.cardBorder,
    flex: 1,
    marginVertical: -8,
  },
  timelineConnectorFirst: {
    marginTop: 0,
  },
  timelineConnectorLast: {
    marginBottom: 0,
  },
  timelineDot: {
    width: 28,
    height: 28,
    borderRadius: 14,
    backgroundColor: Colors.dark.tint,
    justifyContent: 'center',
    alignItems: 'center',
    position: 'absolute',
    top: 12,
    zIndex: 1,
    borderWidth: 2,
    borderColor: 'rgba(255, 255, 255, 0.8)',
  },
  timelineDotAuto: {
    backgroundColor: Colors.dark.accentBlue,
  },
  timelineDotManual: {
    backgroundColor: Colors.dark.accentGreen,
  },
  entryCard: {
    flex: 1,
    backgroundColor: Colors.dark.card,
    borderRadius: 16,
    padding: 16,
    borderWidth: 1,
    borderColor: Colors.dark.cardBorder,
  },
  entryHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  entryLocation: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  entryLocationText: {
    fontSize: 18,
    fontWeight: '700',
    color: Colors.dark.text,
  },
  entryTime: {
    fontSize: 14,
    color: Colors.dark.textSecondary,
  },
  travelStatsContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 152, 0, 0.1)',
    paddingVertical: 8,
    paddingHorizontal: 12,
    borderRadius: 8,
    marginBottom: 12,
  },
  travelStatsText: {
    fontSize: 14,
    color: Colors.dark.accentOrange,
    marginLeft: 8,
  },
  notesContainer: {
    paddingVertical: 8,
  },
  notesText: {
    fontSize: 16,
    color: Colors.dark.text,
    lineHeight: 22,
  },
  entryFooter: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginTop: 12,
    paddingTop: 12,
    borderTopWidth: 1,
    borderTopColor: 'rgba(52, 57, 65, 0.5)',
  },
  entryTypeContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  entryTypeDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    marginRight: 4,
  },
  entryTypeText: {
    fontSize: 12,
    color: Colors.dark.textSecondary,
  },
  entryLocationButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(78, 205, 196, 0.1)',
    paddingVertical: 4,
    paddingHorizontal: 8,
    borderRadius: 4,
  },
  entryLocationButtonText: {
    fontSize: 12,
    color: Colors.dark.tint,
    marginLeft: 4,
  },
  // Modal styles
  modalContainer: {
    flex: 1,
    justifyContent: 'flex-end',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
  modalContent: {
    backgroundColor: Colors.dark.card,
    borderTopLeftRadius: 16,
    borderTopRightRadius: 16,
    padding: 24,
    paddingBottom: 40,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: '700',
    color: Colors.dark.text,
    marginBottom: 16,
  },
  notesInput: {
    backgroundColor: 'rgba(255, 255, 255, 0.05)',
    borderRadius: 8,
    borderWidth: 1,
    borderColor: Colors.dark.cardBorder,
    padding: 12,
    color: Colors.dark.text,
    fontSize: 16,
    minHeight: 120,
    textAlignVertical: 'top',
    marginBottom: 16,
  },
  modalButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  modalButton: {
    flex: 1,
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
  },
  cancelButton: {
    backgroundColor: 'transparent',
    marginRight: 8,
  },
  cancelButtonText: {
    color: Colors.dark.textSecondary,
    fontSize: 16,
    fontWeight: '600',
  },
  saveButton: {
    backgroundColor: Colors.dark.tint,
    marginLeft: 8,
  },
  saveButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  emptyStateWithActions: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  mockDataButtonLarge: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: Colors.dark.tint,
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderRadius: 8,
    marginTop: 16,
  },
  mockDataButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
    marginLeft: 8,
  },
}); 