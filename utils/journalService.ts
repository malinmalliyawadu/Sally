import * as Location from 'expo-location';
import AsyncStorage from '@react-native-async-storage/async-storage';

// Types
export interface JournalEntry {
  id: string;
  timestamp: number;
  location: {
    latitude: number;
    longitude: number;
    placeName?: string;
  };
  distanceTraveled?: number; // Distance in km since the last entry
  weather?: {
    temperature: number;
    condition: string;
  };
  media?: string[]; // URLs or paths to photos/videos
  notes?: string;
  isAutoGenerated: boolean;
}

// Storage keys
const JOURNAL_ENTRIES_KEY = 'journal_entries';
const LAST_LOCATION_KEY = 'last_tracked_location';

// Minimum time and distance between auto entries
const MIN_TIME_BETWEEN_ENTRIES = 3600000; // 1 hour in milliseconds
const MIN_DISTANCE_BETWEEN_ENTRIES = 5; // 5 kilometers

// Get all journal entries
export const getJournalEntries = async (): Promise<JournalEntry[]> => {
  try {
    console.log('Fetching journal entries from AsyncStorage...');
    const entriesJson = await AsyncStorage.getItem(JOURNAL_ENTRIES_KEY);
    
    if (entriesJson) {
      const entries: JournalEntry[] = JSON.parse(entriesJson);
      console.log(`Retrieved ${entries.length} journal entries`);
      
      if (entries.length > 0) {
        console.log(`First entry: ${entries[0].location.placeName}, Last entry: ${entries[entries.length-1].location.placeName}`);
      } else {
        console.log('No entries found in storage');
      }
      
      // Sort by timestamp descending (newest first)
      return entries.sort((a, b) => b.timestamp - a.timestamp);
    }
    
    console.log('No entries found in AsyncStorage (null return)');
    return [];
  } catch (error) {
    console.error('Error fetching journal entries:', error);
    return [];
  }
};

// Save a new journal entry
export const saveJournalEntry = async (entry: Omit<JournalEntry, 'id'>): Promise<JournalEntry> => {
  try {
    // Generate a new ID
    const newEntry: JournalEntry = {
      ...entry,
      id: Date.now().toString(),
    };
    
    // Get existing entries
    const entries = await getJournalEntries();
    
    // Add new entry
    entries.unshift(newEntry);
    
    // Save to storage
    await AsyncStorage.setItem(JOURNAL_ENTRIES_KEY, JSON.stringify(entries));
    
    // Update last location if this is an auto-generated entry
    if (entry.isAutoGenerated) {
      await AsyncStorage.setItem(LAST_LOCATION_KEY, JSON.stringify({
        latitude: entry.location.latitude,
        longitude: entry.location.longitude,
        timestamp: entry.timestamp,
      }));
    }
    
    return newEntry;
  } catch (error) {
    console.error('Error saving journal entry:', error);
    throw error;
  }
};

// Calculate distance between two coordinates in kilometers using Haversine formula
export const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {
  const R = 6371; // Radius of the Earth in km
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  const a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
    Math.sin(dLon/2) * Math.sin(dLon/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  const distance = R * c; // Distance in km
  return distance;
};

// Check if we should create a new auto entry based on time and distance
export const shouldCreateAutoEntry = async (currentLocation: Location.LocationObject): Promise<{
  shouldCreate: boolean;
  distanceTraveled?: number;
}> => {
  try {
    const lastLocationJson = await AsyncStorage.getItem(LAST_LOCATION_KEY);
    
    if (!lastLocationJson) {
      // No previous location, so create a first entry
      return { shouldCreate: true };
    }
    
    const lastLocation = JSON.parse(lastLocationJson);
    const currentTime = Date.now();
    
    // Check if enough time has passed
    if ((currentTime - lastLocation.timestamp) < MIN_TIME_BETWEEN_ENTRIES) {
      return { shouldCreate: false };
    }
    
    // Calculate distance traveled
    const distance = calculateDistance(
      lastLocation.latitude,
      lastLocation.longitude,
      currentLocation.coords.latitude,
      currentLocation.coords.longitude
    );
    
    // Check if we've moved enough distance
    if (distance < MIN_DISTANCE_BETWEEN_ENTRIES) {
      return { shouldCreate: false };
    }
    
    return { 
      shouldCreate: true,
      distanceTraveled: distance
    };
  } catch (error) {
    console.error('Error checking for auto entry:', error);
    return { shouldCreate: false };
  }
};

// Auto-track location and create journal entries
export const trackLocationForJournal = async (): Promise<JournalEntry | null> => {
  try {
    // Request permissions if needed
    const { status } = await Location.requestForegroundPermissionsAsync();
    if (status !== 'granted') {
      console.log('Location permission not granted');
      return null;
    }
    
    // Get current location
    const currentLocation = await Location.getCurrentPositionAsync({
      accuracy: Location.Accuracy.Balanced,
    });
    
    // Check if we should create a new entry
    const { shouldCreate, distanceTraveled } = await shouldCreateAutoEntry(currentLocation);
    
    if (!shouldCreate) {
      return null;
    }
    
    // Get place name
    const reverseGeocode = await Location.reverseGeocodeAsync({
      latitude: currentLocation.coords.latitude,
      longitude: currentLocation.coords.longitude,
    });
    
    const placeName = reverseGeocode[0]?.city || 
                      reverseGeocode[0]?.region || 
                      reverseGeocode[0]?.name ||
                      'Unknown location';
    
    // Create new entry
    const newEntry: Omit<JournalEntry, 'id'> = {
      timestamp: Date.now(),
      location: {
        latitude: currentLocation.coords.latitude,
        longitude: currentLocation.coords.longitude,
        placeName,
      },
      distanceTraveled,
      isAutoGenerated: true,
    };
    
    // Save and return the entry
    return await saveJournalEntry(newEntry);
  } catch (error) {
    console.error('Error tracking location for journal:', error);
    return null;
  }
};

// Add a manual entry with notes and/or media
export const addManualJournalEntry = async (notes: string, media?: string[]): Promise<JournalEntry> => {
  try {
    // Get current location
    const { status } = await Location.requestForegroundPermissionsAsync();
    
    if (status !== 'granted') {
      throw new Error('Location permission not granted');
    }
    
    const currentLocation = await Location.getCurrentPositionAsync({
      accuracy: Location.Accuracy.Balanced,
    });
    
    // Get place name
    const reverseGeocode = await Location.reverseGeocodeAsync({
      latitude: currentLocation.coords.latitude,
      longitude: currentLocation.coords.longitude,
    });
    
    const placeName = reverseGeocode[0]?.city || 
                      reverseGeocode[0]?.region ||
                      reverseGeocode[0]?.name ||
                      'Unknown location';
    
    // Create new entry
    const newEntry: Omit<JournalEntry, 'id'> = {
      timestamp: Date.now(),
      location: {
        latitude: currentLocation.coords.latitude,
        longitude: currentLocation.coords.longitude,
        placeName,
      },
      notes,
      media,
      isAutoGenerated: false,
    };
    
    // Save and return the entry
    return await saveJournalEntry(newEntry);
  } catch (error) {
    console.error('Error adding manual journal entry:', error);
    throw error;
  }
};

// Generate mock journal entries for demo purposes
export const generateMockJournalEntries = async (): Promise<void> => {
  try {
    console.log('Starting to generate mock journal entries...');
    
    // Clear any existing entries
    await AsyncStorage.setItem(JOURNAL_ENTRIES_KEY, '[]');
    console.log('Cleared existing entries');
    
    // Create mock trip data - a comprehensive North to South NZ journey
    const mockTrip: Omit<JournalEntry, 'id'>[] = [
      {
        timestamp: Date.now() - 1000 * 60 * 60 * 24 * 14, // 14 days ago
        location: {
          latitude: -36.8509,
          longitude: 174.7645,
          placeName: 'Auckland',
        },
        notes: 'Started our journey in Auckland! Picked up the van and stocked up on supplies at the local market.',
        isAutoGenerated: false,
      },
      {
        timestamp: Date.now() - 1000 * 60 * 60 * 24 * 13.5, // 13.5 days ago
        location: {
          latitude: -36.4253,
          longitude: 174.6984,
          placeName: 'Warkworth',
        },
        distanceTraveled: 64,
        notes: 'Quick stop for lunch in Warkworth. The local bakery has incredible pies!',
        isAutoGenerated: false,
      },
      {
        timestamp: Date.now() - 1000 * 60 * 60 * 24 * 13, // 13 days ago
        location: {
          latitude: -35.7317,
          longitude: 174.3232,
          placeName: 'Whangarei',
        },
        distanceTraveled: 86,
        isAutoGenerated: true,
      },
      {
        timestamp: Date.now() - 1000 * 60 * 60 * 24 * 12, // 12 days ago
        location: {
          latitude: -35.1928,
          longitude: 173.9675,
          placeName: 'Kerikeri',
        },
        distanceTraveled: 60,
        notes: 'Spent the day exploring the Bay of Islands. The water is so blue!',
        isAutoGenerated: false,
      },
      {
        timestamp: Date.now() - 1000 * 60 * 60 * 24 * 11, // 11 days ago
        location: {
          latitude: -35.2841,
          longitude: 174.0806,
          placeName: 'Paihia',
        },
        distanceTraveled: 15,
        notes: 'Took a boat tour to see dolphins. Worth every penny!',
        isAutoGenerated: false,
      },
      {
        timestamp: Date.now() - 1000 * 60 * 60 * 24 * 10, // 10 days ago
        location: {
          latitude: -36.2477,
          longitude: 174.4473,
          placeName: 'Mangawhai',
        },
        distanceTraveled: 122,
        notes: 'Gorgeous coastal drive down from Bay of Islands.',
        isAutoGenerated: true,
      },
      {
        timestamp: Date.now() - 1000 * 60 * 60 * 24 * 9, // 9 days ago
        location: {
          latitude: -36.9175,
          longitude: 174.4712,
          placeName: 'Muriwai Beach',
        },
        distanceTraveled: 75,
        notes: 'Visited the gannet colony at Muriwai. So many birds!',
        isAutoGenerated: false,
      },
      {
        timestamp: Date.now() - 1000 * 60 * 60 * 24 * 8, // 8 days ago
        location: {
          latitude: -37.6878,
          longitude: 176.1651,
          placeName: 'Tauranga',
        },
        distanceTraveled: 175,
        notes: 'Made it to Tauranga. Beautiful coastal views along the way.',
        isAutoGenerated: false,
      },
      {
        timestamp: Date.now() - 1000 * 60 * 60 * 24 * 7, // 7 days ago
        location: {
          latitude: -37.8570,
          longitude: 176.6405,
          placeName: 'Whakatane',
        },
        distanceTraveled: 82,
        isAutoGenerated: true,
      },
      {
        timestamp: Date.now() - 1000 * 60 * 60 * 24 * 6.5, // 6.5 days ago
        location: {
          latitude: -38.1368,
          longitude: 176.2497,
          placeName: 'Rotorua',
        },
        distanceTraveled: 63,
        notes: 'Visited the geothermal parks. The sulfur smell is strong but the thermal pools were amazing!',
        isAutoGenerated: false,
      },
      {
        timestamp: Date.now() - 1000 * 60 * 60 * 24 * 6, // 6 days ago
        location: {
          latitude: -38.6857,
          longitude: 175.9570,
          placeName: 'Taupo',
        },
        distanceTraveled: 62,
        notes: 'Lake Taupo is stunning. Did a short hike along the shore.',
        isAutoGenerated: false,
      },
      {
        timestamp: Date.now() - 1000 * 60 * 60 * 24 * 5.5, // 5.5 days ago
        location: {
          latitude: -39.2903,
          longitude: 174.0613,
          placeName: 'New Plymouth',
        },
        distanceTraveled: 245,
        isAutoGenerated: true,
      },
      {
        timestamp: Date.now() - 1000 * 60 * 60 * 24 * 5, // 5 days ago
        location: {
          latitude: -39.9420,
          longitude: 175.0473,
          placeName: 'Whanganui',
        },
        distanceTraveled: 152,
        isAutoGenerated: true,
      },
      {
        timestamp: Date.now() - 1000 * 60 * 60 * 24 * 4.5, // 4.5 days ago
        location: {
          latitude: -39.4928,
          longitude: 176.9120,
          placeName: 'Napier',
        },
        distanceTraveled: 147,
        notes: 'Art Deco architecture is so charming! Went wine tasting at Hawke\'s Bay.',
        isAutoGenerated: false,
      },
      {
        timestamp: Date.now() - 1000 * 60 * 60 * 24 * 4, // 4 days ago
        location: {
          latitude: -40.3523,
          longitude: 175.6082,
          placeName: 'Palmerston North',
        },
        distanceTraveled: 178,
        isAutoGenerated: true,
      },
      {
        timestamp: Date.now() - 1000 * 60 * 60 * 24 * 3, // 3 days ago
        location: {
          latitude: -41.2865,
          longitude: 174.7762,
          placeName: 'Wellington',
        },
        distanceTraveled: 144,
        notes: 'Made it to Wellington! Took the scenic coastal route. Windy but gorgeous!',
        isAutoGenerated: false,
      },
      {
        timestamp: Date.now() - 1000 * 60 * 60 * 24 * 2, // 2 days ago
        location: {
          latitude: -40.9006,
          longitude: 174.9859,
          placeName: 'Picton',
        },
        distanceTraveled: 85,
        notes: 'Took the ferry to the South Island. Amazing views of the Marlborough Sounds.',
        isAutoGenerated: false,
      },
      {
        timestamp: Date.now() - 1000 * 60 * 60 * 24 * 1.5, // 1.5 days ago
        location: {
          latitude: -41.5101,
          longitude: 173.9563,
          placeName: 'Blenheim',
        },
        distanceTraveled: 28,
        notes: 'Visited some of the best wineries in Marlborough. The Sauvignon Blanc is incredible!',
        isAutoGenerated: false,
      },
      {
        timestamp: Date.now() - 1000 * 60 * 60 * 24 * 1, // 1 day ago
        location: {
          latitude: -41.2706,
          longitude: 173.2840,
          placeName: 'Nelson',
        },
        distanceTraveled: 115,
        notes: 'Arrived in Nelson. Beautiful golden beaches and craft breweries!',
        isAutoGenerated: false,
      },
      {
        timestamp: Date.now() - 1000 * 60 * 60 * 16, // 16 hours ago
        location: {
          latitude: -42.1035,
          longitude: 171.8867,
          placeName: 'Greymouth',
        },
        distanceTraveled: 225,
        notes: 'Drove along the stunning west coast. So many waterfalls!',
        isAutoGenerated: true,
      },
      {
        timestamp: Date.now() - 1000 * 60 * 60 * 12, // 12 hours ago
        location: {
          latitude: -42.7173,
          longitude: 170.9665,
          placeName: 'Hokitika',
        },
        distanceTraveled: 40,
        notes: 'Checked out the famous Hokitika Gorge. The water is an unreal turquoise blue!',
        isAutoGenerated: false,
      },
      {
        timestamp: Date.now() - 1000 * 60 * 60 * 6, // 6 hours ago
        location: {
          latitude: -43.4662,
          longitude: 170.0181,
          placeName: 'Franz Josef',
        },
        distanceTraveled: 135,
        notes: 'Currently at Franz Josef! Booked a glacier hike for tomorrow. So excited!',
        isAutoGenerated: false,
      },
    ];
    
    console.log(`Created ${mockTrip.length} mock entries to save`);
    
    // Save each mock entry with a unique ID and delay slightly
    // to ensure entries have different timestamps
    const savedEntries: JournalEntry[] = [];
    
    for (let i = 0; i < mockTrip.length; i++) {
      const entry = mockTrip[i];
      const id = `mock-${Date.now()}-${i}`;
      const newEntry: JournalEntry = {
        ...entry,
        id,
      };
      
      savedEntries.push(newEntry);
      console.log(`Prepared entry ${i+1}/${mockTrip.length}: ${newEntry.location.placeName}`);
      
      // Adding a slight delay to ensure different timestamps
      await new Promise(resolve => setTimeout(resolve, 10));
    }
    
    // Save all entries at once
    await AsyncStorage.setItem(JOURNAL_ENTRIES_KEY, JSON.stringify(savedEntries));
    console.log(`Saved all ${savedEntries.length} entries to AsyncStorage`);
    
    // Set last location to most recent entry
    const lastEntry = mockTrip[mockTrip.length - 1];
    await AsyncStorage.setItem(LAST_LOCATION_KEY, JSON.stringify({
      latitude: lastEntry.location.latitude,
      longitude: lastEntry.location.longitude,
      timestamp: lastEntry.timestamp,
    }));
    
    console.log('Mock trip data generated successfully');
  } catch (error) {
    console.error('Error generating mock trip data:', error);
  }
};

// Clear all journal entries (for debugging and testing)
export const clearJournalEntries = async (): Promise<void> => {
  try {
    console.log('Clearing all journal entries...');
    await AsyncStorage.setItem(JOURNAL_ENTRIES_KEY, '[]');
    await AsyncStorage.removeItem(LAST_LOCATION_KEY);
    console.log('All journal entries cleared successfully');
  } catch (error) {
    console.error('Error clearing journal entries:', error);
  }
}; 